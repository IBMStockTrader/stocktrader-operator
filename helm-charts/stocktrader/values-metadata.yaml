#       Copyright 2019-2021 IBM Corp, All Rights Reserved
#       Copyright 2022-2024 Kyndryl, All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Default values for stocktrader.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  __metadata:
    label: "Global Settings"
    description: "Settings that apply to all of the Stock Trader microservices"
  auth:
    __metadata:
      label: "Select the type of authentication"
      description: "Choose from Basic, LDAP, OIDC or None"
      type: string
      options:
      - label: "Basic"
        value: "basic"
      - label: "LDAP"
        value: "ldap"
      - label: "OIDC"
        value: "oidc"
      - label: "None"
        value: "none"
  monitoring:
    __metadata:
      label: "Enable Prometheus monitoring"
      description: "Register a Prometheus scraper for the metrics endpoint for each microservice"
      type: boolean
  ingress:
    __metadata:
      label: "Enable Ingress"
      description: "Enable an Ingress for each front-end microservice"
      type: boolean
  route:
    __metadata:
      label: "Enable Route"
      description: "Enable an OpenShift Route for each front-end microservice"
      type: boolean
  cqrs:
    __metadata:
      label: "Enable CQRS"
      description: "Enable asynchronou interactions (Command Query Responsibility Separation)"
      type: boolean
  istio:
    __metadata:
      label: "Enable Istio"
      description: "Enable sidecars for the OpenShift Service Mesh (aka Istio)"
      type: boolean
  istioNamespace:
    __metadata:
      label: "Istio namespace"
      description: "Namespace for the OpenShift Service Mesh (aka Istio)"
      type: string
  healthCheck:
    __metadata:
      label: "Enable Readiness and Liveness probes"
      description: "Configure Kubernetes to periodically probe each microservice to determine its health"
      type: boolean
  disableLogFiles:
    __metadata:
      label: "Disable logging into the container filesystem"
      description: "Only send logs to stdout - don't mutate the container on each log entry"
      type: boolean
  jsonLogging:
    __metadata:
      label: "Output pod logs in JSON format"
      description: "Enable to send logs to ElasticSearch so they can be viewed in Kibana"
      type: boolean
  traceSpec:
    __metadata:
      label: "Trace specification"
      description: "Control logging level for each microservice or for Liberty features"
      type: string
  specifyCerts:
    __metadata:
      label: "Specify SSL Certificates"
      description: "Enable to feed SSL certs to be trusted by the Liberty-based microservices"
      type: boolean
  certs:
    __metadata:
      label: "SSL Certificates"
      description: "SSL certs to be trusted by the Liberty-based microservices"
      type: string
  externalConfigMap:
    __metadata:
      label: "Use external Kubernetes ConfigMap"
      description: "Allow use of a Kubernetes ConfigMap not created by the operator"
      type: boolean
  configMapName:
    __metadata:
      label: "Name of external Kubernetes ConfigMap"
      description: "Name of a pre-existing Kubernetes ConfigMap not created by the operator"
      type: string
  externalSecret:
    __metadata:
      label: "Use external Kubernetes Secrets"
      description: "Allow use of a Kubernetes Secret not created by the operator"
      type: boolean
  secretName:
    __metadata:
      label: "Name of external Kubernetes Secrets"
      description: "Name of a pre-existing Kubernetes Secret not created by the operator"
      type: string
  proxyServer:
    __metadata:
      label: "Specify proxy server"
      description: "Enable to route http/https traffic from microservices through a proxy"
      type: boolean
  proxyServerAddress:
    __metadata:
      label: "Proxy server address"
      description: "Hostname (or IP address) and port of the proxy"
      type: string
  pullSecret:
    __metadata:
      label: "Use an image pull secret"
      description: "Enable to provide an image pull secret"
      type: boolean
  pullSecretName:
    __metadata:
      label: "Specify the name of an existing image pull secret"
      description: "Name of a pull secret with credentials for pulling microservice Docker images from a secure registry"
      type: string
database:
  __metadata:
    label: "Database Settings.  Mandatory - required by the portfolio microservice"
    description: "Settings that apply to accessing the JDBC database (can be in-cluster, or external)"
    required: true
  kind:
    __metadata:
      label: "Kind of database"
      description: "Choose from DB2, PostgreSQL, or Derby"
      type: string
      options:
      - label: "IBM DB2"
        value: "db2"
      - label: "Oracle"
        value: "oracle"
      - label: "PostgreSQL"
        value: "postgres"
      - label: "MySQL"
        value: "mysql"
      - label: "MS SQL Server"
        value: "sqlserver"
      - label: "Apache Derby"
        value: "derby"
  host:
    __metadata:
      label: "Host name (or IP address)"
      description: "Use the Kubernetes service DNS name if using an in-cluster database"
      type: string
  port:
    __metadata:
      label: "Port number"
      description: "This usually defaults to 50000 for DB2"
      type: number
  id:
    __metadata:
      label: "User ID"
      description: "Login ID"
      type: string
  password:
    __metadata:
      label: "Password"
      description: "Will be stored in a Kubernetes secret"
      type: password
  db:
    __metadata:
      label: "Database name"
      description: "Name of the database"
      type: string
  ssl:
    __metadata:
      label: "Require SSL"
      description: "Specify whether SSL must be used for database connections"
      type: boolean
vault:
  __metadata:
    label: "Vault integration"
    description: "Settings that apply to Vault integration"
  enabled:
    __metadata:
      label: "Enable Vault integration"
      description: "Enable microservices to pull secrets from Vault"
      type: boolean
  path:
    __metadata:
      label: "Vault secrets path"
      description: "The local path in a Vault instance where the secrets are stored"
      type: string
  role:
    __metadata:
      label: "Vault authentication role"
      description: "The registered authentication role created in Vault"
      type: string
  jwtPath:
    __metadata:
      label: "Vault ServiceAccount JWT Path"
      description: "The container path of the ServiceAccount JWT"
      type: string
broker:
  __metadata:
    label: "Broker microservice"
    description: "Settings that apply to the Broker microservice"
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the broker microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the broker microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the broker microservice"
        type: string
  url:
    __metadata:
      label: "Broker URL"
      description: "URL at which this microservice can be accessed by other microservices"
      type: string
portfolio:
  __metadata:
    label: "Portfolio microservice"
    description: "Settings that apply to the Portfolio microservice"
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the portfolio microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the portfolio microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the portfolio microservice"
        type: string
  url:
    __metadata:
      label: "Portfolio URL"
      description: "URL at which this microservice can be accessed by other microservices"
      type: string
stockQuote:
  __metadata:
    label: "Stock Quote microservice"
    description: "Settings that apply to the Stock Quote microservice"
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the stock quote microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the stock quote microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the stock quote microservice"
        type: string
  url:
    __metadata:
      label: "Stock Quote URL"
      description: "URL at which this microservice can be accessed by other microservices"
      type: string
  apiConnect:
    __metadata:
      label: "API Connect URL"
      description: "URL for contacting the stock quote service in API Connect"
      type: string
  iexTrading:
    __metadata:
      label: "IEX Trading URL"
      description: "URL for contacting IEX directly (used as fallback if API Connect isn't working)"
      type: string
  iexApiKey:
    __metadata:
      label: "IEX API Key"
      description: "Your API Key for the IEX Cloud.  Optional: Only used if API Connect isn't working"
      type: password
  encryption:
    __metadata:
      label: "Encryption settings"
      description: "Encryption settings for encrypting data to redis"
    class:
      __metadata:
        label: "Encryption class"
        description: "Encryptor class used for encrypting data to redis, there are 4 modes: springSecurityBytesEncryptor, noneEncryptor, aesGsmEncryptor, springSecurityTextEncryptor"
        type: string
      options:
      - label: "None"
        value: "noneEncryptor"
      - label: "Text"
        value: "springSecurityTextEncryptor"
      - label: "Bytes"
        value: "springSecurityBytesEncryptor"
      - label: "AES GSM"
        value: "aesGsmEncryptor"
    saltBytes:
      __metadata:
        label: "Salt bytes text"
        description: "Salt bytes used for encryption and decryption. Allows to create multiple replicas. Optional if encryptor type is noneEncryptor"
        type: string
    password:
      __metadata:
        label: "Encryption password"
        description: "Password using for encryption and decryption"
        type: password
trader:
  __metadata:
    label: "Trader simple UI microservice"
    description: "Settings that apply to the Java servlet-based Trader microservice"
  enabled:
    __metadata:
      label: "Enable the basic UI microservice"
      description: "This is a simple form-based browser client for IBM Stock Trader"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the trader microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the trader microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the trader microservice"
        type: string
  whiteLabelHeaderImage:
    __metadata:
      label: "Header image URL"
      description: "URL for alternate header image (for white-labeling)"
      type: string
  whiteLabelFooterImage:
    __metadata:
      label: "Footer image URL"
      description: "URL for alternate footer image (for white-labeling)"
      type: string
  whiteLabelLoginMessage:
    __metadata:
      label: "Login message"
      description: "URL for alternate login message (for white-labeling)"
      type: string
tradr:
  __metadata:
    label: "Tradr fancy UI microservice"
    description: "Settings that apply to the Node.js/Vue.js-based Tradr microservice (the only non-Java one in IBM Stock Trader).  Requires OIDC"
  enabled:
    __metadata:
      label: "Enable the fancy UI microservice"
      description: "This is a sophisticated JavaScript-based browser client for IBM Stock Trader, which requires configuring OpenID Connect (OIDC) for authentication"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the tradr microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the tradr microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the tradr microservice"
        type: string
cashAccount:
  __metadata:
    label: "Cash Account microservice (optional)"
    description: "Settings that apply to the Cash Account microservice (which depends upon Redis and a relational database)"
  enabled:
    __metadata:
      label: "Enable the Cash Account microservice"
      description: "This microservice keeps track of the cash spent or gained from buying or selling stock"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the cash account microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the cash account microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the cash account microservice"
        type: string
  url:
    __metadata:
      label: "Cash Account URL"
      description: "URL at which this microservice can be accessed by other microservices"
      type: string
  exchangeRateUrl:
    __metadata:
      label: "Currency Exchange Rate Service URL"
      description: "URL of the service that converts currency to/from US Dollars"
      type: string
account:
  __metadata:
    label: "Account microservice (optional - requires Cloudant)"
    description: "Settings that apply to the Account microservice (which depends upon Cloudant)"
  enabled:
    __metadata:
      label: "Enable the Account microservice"
      description: "This microservice keeps track of account balance, commissions, sentiment, and free trades"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the account microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the account microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the account microservice"
        type: string
messaging:
  __metadata:
    label: "Messaging microservice (optional - requires MQ)"
    description: "Settings that apply to the Messaging microservice (enables notifications about changes in loyalty levels)"
  enabled:
    __metadata:
      label: "Enable the messaging microservice"
      description: "This optional service responds to JMS messages sent to MQ by Portfolio when your loyalty level changes, and invokes the Notification service"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the messaging microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the messaging microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the messaging microservice"
        type: string
  notification:
    __metadata:
      label: "Notification service settings"
      description: "How the messaging microservice calls the notification microservice"
    url:
      __metadata:
        label: "URL for the Notification microservice"
        description: "Use the Kubernetes service DNS name in the URL when both are deployed to the same cluster"
notificationSlack:
  __metadata:
    label: "Slack-based Notification microservice (optional - requires Messaging microservice)"
    description: "Settings that apply to the Slack-based notification microservice (posts to a Slack channel when your loyalty level changes)"
  enabled:
    __metadata:
      label: "Enable the Slack-based notification microservice (choose this or the Twitter-based one, not both)"
      description: "This optional service posts to a Slack channel when your loyalty level changes"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the Slack-based notification microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the Slack-based notification microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the Slack-based notification microservice"
        type: string
notificationTwitter:
  __metadata:
    label: "Twitter-based Notification microservice (optional - requires Messaging microservice)"
    description: "Settings that apply to the Twitter-based notification microservice (sends a tweet when your loyalty level changes)"
  enabled:
    __metadata:
      label: "Enable the Twitter-based notification microservice (choose this or the Slack-based one, not both)"
      description: "This optional service sends a tweet as @IBMStockTrader when your loyalty level changes"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the Twitter-based notification microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the Twitter-based notification microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the Twitter-based notification microservice"
        type: string
tradeHistory:
  __metadata:
    label: "Trade History microservice"
    description: "Settings that apply to the Trade History microservice"
  enabled:
    __metadata:
      label: "Enable the Trade History microservice"
      description: "This optional service maintains a history of all stock trades for your portfolio.  Requires a Mongo DB; this pod won't start if Mongo is unavailable"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the trade history microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the trade history microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the trade history microservice"
        type: string
  url:
    __metadata:
      label: "Trade History URL"
      description: "URL at which this microservice can be accessed by other microservices"
      type: string
looper:
  __metadata:
    label: "Looper microservice"
    description: "Settings that apply to the Looper microservice"
  enabled:
    __metadata:
      label: "Enable the Looper microservice"
      description: "This optional service drives performance and stress tests against the Portfolio microservice"
      type: boolean
  replicas:
    __metadata:
      label: "Initial number of pods for this microservice"
      description: "If auto-scaling is enabled, more may get created if needed"
      type: number
  autoscale:
    __metadata:
      label: "Enable Auto-scaling"
      description: "Enable a Horizontal Pod Autoscaler for this microservice"
      type: boolean
  maxReplicas:
    __metadata:
      label: "Maximum number of pods for this microservice"
      description: "Only used if auto-scaling is enabled"
      type: number
  cpuThreshold:
    __metadata:
      label: "CPU Threshold"
      description: "If auto-scaling is enabled, CPU threshold that results in another replica being created"
      type: number
  image:
    __metadata:
      label: "Docker image settings"
      description: "How to locate the Docker image for the looper microservice"
    repository:
      __metadata:
        label: "Docker image registry"
        description: "Path to locate the Docker image for the looper microservice"
        type: string
    tag:
      __metadata:
        label: "Docker image tag"
        description: "Tag for the Docker image for the looper microservice"
        type: string
  url:
    __metadata:
      label: "Looper URL"
      description: "URL at which this microservice can be accessed by other microservices"
      type: string
jwt:
  __metadata:
    label: "JSON Web Token (JWT) settings"
    description: "Settings that apply to the JWT used for Single Sign-On between microservices"
  issuer:
    __metadata:
      label: "JWT Issuer URL"
      description: "The default value is usually sufficient"
      type: string
  audience:
      label: "JWT Audience"
      description: "The default value is usually sufficient"
      type: string
oidc:
  __metadata:
    label: "OpenID Connect (OIDC) settings (optional)"
    description: "Settings to authenticate against the OIDC provider, such as IBMid or KeyCloak"
  clientId:
    __metadata:
      label: "Client ID"
      description: "The client ID issued to you by the OIDC provider"
      type: password
  clientSecret:
    __metadata:
      label: "Client Secret"
      description: "The client secret issued to you by the OIDC provider"
      type: password
  discoveryUrl:
    __metadata:
      label: "Discovery URL"
      description: "The URL of the discovery endpoint for this OIDC provider"
      type: string
  jwksUrl:
    __metadata:
      label: "JWKS URL"
      description: "The URL of the JSON Web Key Set endpoint for this OIDC provider"
      type: string
ldap:
  __metadata:
    label: "LDAP settings (optional)"
    description: "Settings to authenticate against Lightweight Directory Access Protocol (LDAP)"
  host:
    __metadata:
      label: "Host name or IP address"
      description: "Make sure your cloud has connectivity to this address, if using an on-premises LDAP"
      type: string
  port:
    __metadata:
      label: "Port number"
      description: "This usually defaults to 389"
      type: number
  baseDN:
    __metadata:
      label: "Base DN"
      description: "Comma-separated list of distinguished names"
      type: string
  realm:
    __metadata:
      label: "Realm name"
      description: "User recognizable name for the LDAP environment"
      type: string
watson:
  __metadata:
    label: "Watson Tone Analyzer settings (optional)"
    description: "Configuration for the 'submit feedback' operation to call the Watson Tone Analyzer"
  id:
    __metadata:
      label: "ID"
      description: "Login ID for the Watson Tone Analyzer.  Leave set to `apikey` if using an API key instead"
      type: string
  passwordOrApiKey:
    __metadata:
      label: "Password or API key"
      description: "Login password for the Watson Tone Analyzer.  If you have an API key instead, specify that here"
      type: password
  url:
    __metadata:
      label: "URL"
      description: "URL for the Watson Tone Analyzer.  Generally the default value will be sufficient"
      type: string
odm:
  __metadata:
    label: "ODM settings (optional)"
    description: "Configuration for the determineLoyalty rule set in Operational Decision Management (ODM).  Needed only if you want a loyalty level calculated for your portfolio"
  id:
    __metadata:
      label: "ID"
      description: "Login ID for ODM"
      type: string
  password:
    __metadata:
      label: "Password"
      description: "Login password for ODM"
      type: password
  url:
    __metadata:
      label: "URL"
      description: "URL for ODM"
      type: string
mq:
  __metadata:
    label: "MQ settings (optional)"
    description: "Configuration for MQ.  Can be in-cluster, or external.  Needed only if you want to receive notifications about changes in loyalty level"
  kind:
    __metadata:
      label: "Kind of MQ Provider"
      description: "Choose from IBM MQ or Amazon MQ (Apache ActiveMQ)"
      type: string
      options:
        - label: "IBM MQ"
          value: "ibm-mq"
        - label: "Amazon MQ (Apache ActiveMQ)"
          value: "amazon-mq-apache-mq"
  host:
    __metadata:
      label: "Host"
      description: "Host name, IP address, or URL connection string for MQ.  Use the Kube DNS service name if using an intra-cluster deployment of MQ"
      type: string
  port:
    __metadata:
      label: "Port"
      description: "Port number for MQ.  Use the local port number (not the node port or Ingress port) if using an intra-cluster deployment of MQ"
      type: number
  id:
    __metadata:
      label: "ID"
      description: "Login ID for MQ"
      type: string
  password:
    __metadata:
      label: "Password"
      description: "Login password for MQ.  The default installation of MQ gives you an id of 'app', with no password"
      type: password
  queueManager:
    __metadata:
      label: "Queue Manager"
      description: "Queue Manager to be used in IBM MQ"
      type: string
  queue:
    __metadata:
      label: "Queue"
      description: "Physical/Base Queue to be used in the MQ provider"
      type: string
  channel:
    __metadata:
      label: "Channel"
      description: "Channel to be used in IBM MQ"
      type: string
redis:
  __metadata:
    label: "Redis settings (optional)"
    description: "Caches stock quotes for performance.  Quotes less than a configured staleness are used from the cache, rather than hitting API Connect and IEX every time"
  urlWithCredentials:
    __metadata:
      label: "URL"
      description: "Use the Kube DNS service name and local port number for an intra-cluster deployment of Redis.  Encode any needed credentials into the URL"
      type: string
  cacheInterval:
    __metadata:
      label: "Cache Interval"
      description: "Specify how stale a cached quote can be before requiring another trip outside the cluster to obtain a fresh one"
      type: number
openwhisk:
  __metadata:
    label: "OpenWhisk settings (optional)"
    description: "Configuration for the PostLoyaltyLevelToSlack action sequence in OpenWhisk, called by the optional Slack-based Notification microservice (which requires the Messaging microservice and MQ).  Can be in-cluster, or the hosted IBM Cloud Functions"
  id:
    __metadata:
      label: "ID"
      description: "Login ID for OpenWhisk"
      type: string
  password:
    __metadata:
      label: "Password"
      description: "Login password for OpenWhisk"
      type: password
  url:
    __metadata:
      label: "URL"
      description: "URL for OpenWhisk.  Use the Kube DNS service name in the URL if using an intra-cluster deployment of OpenWhisk"
      type: string
twitter:
  __metadata:
    label: "Twitter settings (optional)"
    description: "Configuration for the Twitter-based notification service to talk to Twitter (requires Messaging microservice and MQ)"
  consumerKey:
    __metadata:
      label: "Consumer Key"
      description: "Consumer key for Twitter"
      type: password
  consumerSecret:
    __metadata:
      label: "Consumer Secret"
      description: "Consumer secret for Twitter"
      type: password
  accessToken:
    __metadata:
      label: "Access Token"
      description: "Access token for Twitter"
      type: password
  accessTokenSecret:
    __metadata:
      label: "Access Token Secret"
      description: "Access token secret for Twitter"
      type: password
kafka:
  __metadata:
    label: "Kafka settings (optional)"
    description: "Configuration for Portfolio to asynchronously talk to Trade History (which requires Mongo).  Only tested with IBM Event Streams as the Kafka provider so far"
  address:
    __metadata:
      label: "Address"
      description: "Specify in ip:port or hostname:port format.  Use the Kube DNS service name and local port when using an intra-cluster deployment of IBM Event Streams"
      type: string
  accountTopic:
    __metadata:
      label: "Account topic"
      description: "Kafka topic for Account updates (for CQRS)"
      type: string
  portfolioTopic:
    __metadata:
      label: "Portfolio topic"
      description: "Kafka topic for Portfolio updates (for CQRS)"
      type: string
  historyTopic:
    __metadata:
      label: "History topic"
      description: "Kafka topic for Trade History (for ROI calculation)"
      type: string
  user:
    __metadata:
      label: "User ID"
      description: "Kafka user name.  Defaults to 'token' when using an API key"
      type: string
  apiKey:
    __metadata:
      label: "API Key"
      description: "Kafka API key"
      type: password
  saslMechanism:
    __metadata:
      label: "Sasl Mechanism"
      description: "The mechanism used for the sasl authentication"
      type: string
  saslJaasConfig:
    __metadata:
      label: "Sasl Config"
      description: "Configures the Simple Authentication and Security Layer (SASL) for Java Authentication and Authorization Service (Jaas), specifying authentication details."
      type: string
cloudant:
  __metadata:
    label: "Cloudant settings (optional)"
    description: "Account stores the balance, commissions, sentiment, and free trades for a portfolio to a Cloudant database.  Only needed if using the optional Account microservice"
  url:
    __metadata:
      label: "URL"
      description: "URL for Cloudant.  Use the Kube DNS service name and port in it if using an intra-cluster deployment of Cloudant"
      type: string
  id:
    __metadata:
      label: "ID"
      description: "User ID for Cloudant"
      type: string
  password:
    __metadata:
      label: "Password"
      description: "Password for Cloudant"
      type: password
  database:
    __metadata:
      label: "Account Database"
      description: "Account database name for Cloudant"
      type: string
mongo:
  __metadata:
    label: "Mongo settings (optional)"
    description: "Trade History stores the history of stock purchases here (used in return-on-investment calculations).  Only needed if using the optional Trade History microservice"
  ip:
    __metadata:
      label: "Host"
      description: "Host name, or IP address, for Mongo.  Use the Kube DNS service name if using an intra-cluster deployment of Mongo"
      type: string
  port:
    __metadata:
      label: "Port"
      description: "Port number for Mongo.  Use the local port number (not the node port or Ingress port) if using an intra-cluster deployment of Mongo"
      type: number
  user:
    __metadata:
      label: "User ID"
      description: "Login ID for Mongo"
      type: string
  password:
    __metadata:
      label: "Password"
      description: "Login password for Mongo"
      type: password
  connectionString:
    __metadata:
      label: "Connection string"
      description: "Connection string for mongo"
      type: string
  database:
    __metadata:
      label: "Database"
      description: "Database name for Mongo"
      type: string
  authDB:
    __metadata:
      label: "Auth database"
      description: "Auth database name for Mongo"
      type: string
s3:
  __metadata:
    label: "S3 settings (optional)"
    description: "Configuration settings for logging to an S3 bucket in IBM Cloud Object Storage"
  enabled:
    __metadata:
      label: "Enabled"
      description: "Enable logging of portfolios to an S3 bucket"
      type: boolean
  bucket:
    __metadata:
      label: "Bucket"
      description: "S3 bucket name"
      type: string
  location:
    __metadata:
      label: "Location"
      description: "S3 data center location"
      type: string
  endpointUrl:
    __metadata:
      label: "Endpoint URL"
      description: "S3 endpoint URL"
      type: string
  resourceInstanceId:
    __metadata:
      label: "Resource Instance ID"
      description: "S3 resource instance ID"
      type: string
  apiKey:
    __metadata:
      label: "API Key"
      description: "S3 API Key"
      type: string
