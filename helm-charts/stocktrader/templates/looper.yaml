#       Copyright 2017-2021 IBM Corp, All Rights Reserved
#       Copyright 2022-2024 Kyndryl, All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

{{- if .Values.looper.enabled }}
#Deploy the pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-looper
  labels:
    app: {{ .Release.Name }}-stock-trader
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"{{ .Release.Name }}-broker"}]'
    prism.subkind: Liberty
spec:
{{- if not .Values.looper.autoscale }}
  replicas: {{ .Values.looper.replicas }}
{{- end }}
  selector:
    matchLabels:
      app: looper
  template:
    metadata:
      labels:
        app: looper
      annotations:
        git-repo: "https://github.com/IBMStockTrader/looper"
{{- if .Values.global.monitoring }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9080"
{{- end }}
{{- if .Values.global.istio }}
        maistra.io/expose-route: 'true'
        sidecar.istio.io/inject: 'true'
{{- end }}
    spec:
{{- if .Values.global.pullSecret }}
      imagePullSecrets:
      - name: {{ tpl .Values.global.pullSecretName . }}
{{- end }}
      containers:
      - name: looper
        image: "{{ .Values.looper.image.repository }}:{{ .Values.looper.image.tag }}"
        env:
          - name: AUTH_TYPE
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: auth.type
{{- if .Values.azureInstrumentation.enabled }}
          - name: APPLICATIONINSIGHTS_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: {{ tpl .Values.global.secretName . }}
                key: azureInstrumentation.connectionString
                optional: true
{{- end }}
          - name: TRACE_SPEC
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: trace.spec
                optional: true
          - name: JWT_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }} 
                key: jwt.audience
          - name: JWT_ISSUER
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: jwt.issuer
          - name: BROKER_URL
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: broker.url
                optional: true
          - name: LOOPER_URL
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: looper.url
                optional: true
{{- if .Values.global.specifyCerts }}
          - name: cert_defaultTrustStore
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: ssl.certs
                optional: true
{{- end }}
{{- if .Values.global.jsonLogging }}
          - name: WLP_LOGGING_CONSOLE_FORMAT
            value: json
          - name: WLP_LOGGING_CONSOLE_SOURCE
            value: message,ffdc,trace
{{- end }}
{{- if .Values.global.disableLogFiles }}
          - name: WLP_LOGGING_MESSAGE_FORMAT
            value: json
          - name: WLP_LOGGING_MESSAGE_SOURCE
            value: none
{{- end }}
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
{{- if .Values.global.healthCheck }}
        startupProbe:
          httpGet:
            path: /health/started
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9080
          periodSeconds: 15
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9080
          periodSeconds: 15
          failureThreshold: 3
{{- end }}
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
            ephemeral-storage: 256Mi
          requests:
            cpu: 250m
            memory: 1Gi
            ephemeral-storage: 32Mi
{{- if .Values.looper.autoscale }}
---
#Deploy the autoscaler
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-looper-hpa
  labels:
    app: stock-trader
spec:
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 0
      selectPolicy: Min
      policies:
        - type: Pods
          value: 1
          periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Max
      policies:
        - type: Percent
          value: 100
          periodSeconds: 120
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}-looper
  minReplicas: {{ .Values.looper.replicas }}
  maxReplicas: {{ .Values.looper.maxReplicas }}
  targetCPUUtilizationPercentage: {{ .Values.looper.cpuThreshold }}
{{- end }}
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-looper-service
  labels:
    app: looper
{{- if .Values.global.monitoring }}
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: "9080"
{{- end }}
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: looper
{{- if .Values.global.ingress }}
---
#Configure the ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-looper-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    #ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/secure-backends: "true"
    #ingress.kubernetes.io/app-root: "/looper"
spec:
  rules:
  - host:
    http:
      paths:
      - path: /looper
        pathType: Prefix
        backend:
          service:
            name: {{ .Release.Name }}-looper-service
            port:
              number: 9080
spec:
  rules:
  - http:
      paths:
      - path: /looper
        backend:
          serviceName: {{ .Release.Name }}-looper-service
          servicePort: 9080
{{- end }}
{{- if .Values.global.route }}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: looper
  name: {{ .Release.Name }}-looper
spec:
  port:
    targetPort: http
  tls:
    termination: edge
  to:
    kind: Service
    name: {{ .Release.Name }}-looper-service
    weight: 100
  wildcardPolicy: None
{{- end }}
{{- end }}
