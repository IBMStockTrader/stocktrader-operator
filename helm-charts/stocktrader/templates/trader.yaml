#       Copyright 2017-2021 IBM Corp, All Rights Reserved
#       Copyright 2022-2025 Kyndryl, All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

{{- if .Values.trader.enabled }}
#Deploy the pod
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-trader
  labels:
    app: {{ .Release.Name }}-stock-trader
  annotations:
    app.openshift.io/connects-to: '[{"apiVersion":"apps/v1","kind":"Deployment","name":"{{ .Release.Name }}-broker"}]'
    prism.subkind: Liberty
spec:
{{- if not .Values.trader.autoscale }}
  replicas: {{ .Values.trader.replicas }}
{{- end }}
  selector:
    matchLabels:
      app: trader
  template:
    metadata:
      labels:
        app: trader
      annotations:
        git-repo: "https://github.com/IBMStockTrader/trader"
{{- if .Values.vault.enabled }}
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-inject-secret-stocktrader-secrets.txt: {{ .Values.vault.path }}
        vault.hashicorp.com/agent-inject-template-stocktrader-secrets.txt: |
          {{"{{"}}- with secret "{{ .Values.vault.path }}" -{{"}}"}}
          export S3_API_KEY={{"{{"}} .Data.data.s3ApiKey {{"}}"}}
          export OIDC_CLIENTID={{"{{"}} .Data.data.oidcClientId {{"}}"}}
          export OIDC_CLIENTSECRET={{"{{"}} .Data.data.oidcClientSecret {{"}}"}}
          {{"{{"}}- end -{{"}}"}}
        vault.hashicorp.com/role: {{ .Values.vault.role }}
{{- end }}
{{- if .Values.global.monitoring }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9080"
{{- end }}
{{- if .Values.global.istio }}
        maistra.io/expose-route: 'true'
        sidecar.istio.io/inject: 'true'
{{- end }}
    spec:
{{- if .Values.global.pullSecret }}
      imagePullSecrets:
      - name: {{ tpl .Values.global.pullSecretName . }}
{{- end }}
      containers:
      - name: trader
        image: "{{ .Values.trader.image.repository }}:{{ .Values.trader.image.tag }}"
{{- if .Values.vault.enabled }}
        args:
          - sh
          - '-c'
          - source /vault/secrets/stocktrader-secrets.txt && /opt/ol/helpers/runtime/docker-server.sh /opt/ol/wlp/bin/server run defaultServer
{{- end }}
        env:
          - name: AUTH_TYPE
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: auth.type
          - name: TRACE_SPEC
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: trace.spec
                optional: true
          - name: JWT_AUDIENCE
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: jwt.audience
          - name: JWT_ISSUER
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: jwt.issuer
          - name: LDAP_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }} 
                key: ldap.host
                optional: true
          - name: LDAP_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }} 
                key: ldap.port
                optional: true
          - name: LDAP_BASE_DN
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }} 
                key: ldap.baseDN
                optional: true
          - name: LDAP_REALM
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }} 
                key: ldap.realm
                optional: true
          - name: BROKER_URL
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: broker.url
                optional: true
          - name: S3_ENABLED
            value: {{ quote .Values.s3.enabled }}
          - name: S3_BUCKET
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: s3.bucket
                optional: true
          - name: S3_LOCATION
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: s3.location
                optional: true
          - name: S3_ENDPOINT_URL
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: s3.endpointUrl
                optional: true
          - name: S3_RESOURCE_INSTANCE_ID
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: s3.resourceInstanceId
                optional: true
{{- if not .Values.vault.enabled }}
          - name: S3_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ tpl .Values.global.secretName . }}
                key: s3.apiKey
                optional: true
          - name: OIDC_CLIENTID
            valueFrom:
              secretKeyRef:
                name: {{ tpl .Values.global.secretName . }}
                key: oidc.clientId
                optional: true
          - name: OIDC_CLIENTSECRET
            valueFrom:
              secretKeyRef:
                name: {{ tpl .Values.global.secretName . }}
                key: oidc.clientSecret
                optional: true
{{- end }}
          - name: OIDC_DISCOVERY_URL
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: oidc.discoveryUrl
                optional: true
{{- if .Values.global.specifyCerts }}
          - name: cert_defaultTrustStore
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: ssl.certs
                optional: true
{{- end }}
          - name: ACCOUNT_ENABLED
            value: {{ quote .Values.account.enabled }}
          - name: CASH_ACCOUNT_ENABLED
            value: {{ quote .Values.cashAccount.enabled }}
          - name: TRADE_HISTORY_ENABLED
            value: {{ quote .Values.tradeHistory.enabled }}
          - name: WHITE_LABEL_HEADER_IMAGE
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: trader.whiteLabelHeaderImage
                optional: true
          - name: WHITE_LABEL_FOOTER_IMAGE
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: trader.whiteLabelFooterImage
                optional: true
          - name: WHITE_LABEL_LOGIN_MESSAGE
            valueFrom:
              configMapKeyRef:
                name: {{ tpl .Values.global.configMapName . }}
                key: trader.whiteLabelLoginMessage
                optional: true
{{- if .Values.global.jsonLogging }}
          - name: WLP_LOGGING_CONSOLE_FORMAT
            value: json
          - name: WLP_LOGGING_CONSOLE_SOURCE
            value: message,ffdc,trace
{{- end }}
{{- if .Values.global.disableLogFiles }}
          - name: WLP_LOGGING_MESSAGE_FORMAT
            value: json
          - name: WLP_LOGGING_MESSAGE_SOURCE
            value: none
{{- end }}
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
{{- if .Values.global.healthCheck }}
        startupProbe:
          httpGet:
            path: /health/started
            port: 9080
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9080
          periodSeconds: 15
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9080
          periodSeconds: 15
          failureThreshold: 3
{{- end }}
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
            ephemeral-storage: 256Mi
          requests:
            cpu: 250m
            memory: 1Gi
            ephemeral-storage: 32Mi
{{- if .Values.trader.autoscale }}
---
#Deploy the autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Release.Name }}-trader-hpa
  labels:
    app: stock-trader
spec:
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 0
      selectPolicy: Min
      policies:
        - type: Pods
          value: 1
          periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      selectPolicy: Max
      policies:
        - type: Percent
          value: 100
          periodSeconds: 120
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Release.Name }}-trader
  minReplicas: {{ .Values.trader.replicas }}
  maxReplicas: {{ .Values.trader.maxReplicas }}
  # Replace legacy targetCPUUtilizationPercentage with proper v2 metrics
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.trader.cpuThreshold }}
{{- end }}
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-trader-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
{{- if .Values.global.monitoring }}
    prometheus.io/scrape: 'true'
    prometheus.io/port: "9080"
{{- end }}
  finalizers:
  - service.kubernetes.io/load-balancer-cleanup
  labels:
    app: trader
spec:
  type: LoadBalancer
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: trader
{{- if .Values.global.ingress }}
---
#Configure the ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-trader-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    #ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/secure-backends: "true"
    #ingress.kubernetes.io/app-root: "/trader"
spec:
  rules:
  - host:
    http:
      paths:
      - path: /trader
        pathType: Prefix
        backend:
          service:
            name: {{ .Release.Name }}-trader-service
            port:
              number: 9080
{{- end }}
{{- if .Values.global.route }}
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: trader
  name: {{ .Release.Name }}-trader
spec:
  port:
    targetPort: http
  tls:
    termination: edge
  to:
    kind: Service
    name: {{ .Release.Name }}-trader-service
    weight: 100
  wildcardPolicy: None
---
{{- end }}
{{- end }}
